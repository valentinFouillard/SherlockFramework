(set-option :produce-models true)
(set-logic QF_UFLIA)
(declare-fun most (Bool) Int)
(assert(= (most true) 1))
(assert (= (most false) 0))
(declare-const alarme_0 Bool)
(declare-const known_alarme_0 Bool)
(declare-const Obs_alarme_0 Bool)
(assert (=> Obs_alarme_0 (and alarme_0 known_alarme_0) ))
(declare-const ObsNot_alarme_0 Bool)
(assert (=> ObsNot_alarme_0 (and (not alarme_0) known_alarme_0) ))
(declare-const alarme_1 Bool)
(declare-const known_alarme_1 Bool)
(declare-const Obs_alarme_1 Bool)
(assert (=> Obs_alarme_1 (and alarme_1 known_alarme_1) ))
(declare-const ObsNot_alarme_1 Bool)
(assert (=> ObsNot_alarme_1 (and (not alarme_1) known_alarme_1) ))
(declare-const keep_alarme_1 Bool)
(assert (= keep_alarme_1 (= alarme_0 alarme_1)))
(declare-const keepKnown_alarme_1 Bool)
(assert (= keepKnown_alarme_1 (= known_alarme_0 known_alarme_1)))
(declare-const alarme_2 Bool)
(declare-const known_alarme_2 Bool)
(declare-const Obs_alarme_2 Bool)
(assert (=> Obs_alarme_2 (and alarme_2 known_alarme_2) ))
(declare-const ObsNot_alarme_2 Bool)
(assert (=> ObsNot_alarme_2 (and (not alarme_2) known_alarme_2) ))
(declare-const keep_alarme_2 Bool)
(assert (= keep_alarme_2 (= alarme_1 alarme_2)))
(declare-const keepKnown_alarme_2 Bool)
(assert (= keepKnown_alarme_2 (= known_alarme_1 known_alarme_2)))
(declare-const voyantVert_0 Bool)
(declare-const known_voyantVert_0 Bool)
(declare-const Obs_voyantVert_0 Bool)
(assert (=> Obs_voyantVert_0 (and voyantVert_0 known_voyantVert_0) ))
(declare-const ObsNot_voyantVert_0 Bool)
(assert (=> ObsNot_voyantVert_0 (and (not voyantVert_0) known_voyantVert_0) ))
(declare-const voyantVert_1 Bool)
(declare-const known_voyantVert_1 Bool)
(declare-const Obs_voyantVert_1 Bool)
(assert (=> Obs_voyantVert_1 (and voyantVert_1 known_voyantVert_1) ))
(declare-const ObsNot_voyantVert_1 Bool)
(assert (=> ObsNot_voyantVert_1 (and (not voyantVert_1) known_voyantVert_1) ))
(declare-const keep_voyantVert_1 Bool)
(assert (= keep_voyantVert_1 (= voyantVert_0 voyantVert_1)))
(declare-const keepKnown_voyantVert_1 Bool)
(assert (= keepKnown_voyantVert_1 (= known_voyantVert_0 known_voyantVert_1)))
(declare-const voyantVert_2 Bool)
(declare-const known_voyantVert_2 Bool)
(declare-const Obs_voyantVert_2 Bool)
(assert (=> Obs_voyantVert_2 (and voyantVert_2 known_voyantVert_2) ))
(declare-const ObsNot_voyantVert_2 Bool)
(assert (=> ObsNot_voyantVert_2 (and (not voyantVert_2) known_voyantVert_2) ))
(declare-const keep_voyantVert_2 Bool)
(assert (= keep_voyantVert_2 (= voyantVert_1 voyantVert_2)))
(declare-const keepKnown_voyantVert_2 Bool)
(assert (= keepKnown_voyantVert_2 (= known_voyantVert_1 known_voyantVert_2)))
(declare-const voyantRouge_0 Bool)
(declare-const known_voyantRouge_0 Bool)
(declare-const Obs_voyantRouge_0 Bool)
(assert (=> Obs_voyantRouge_0 (and voyantRouge_0 known_voyantRouge_0) ))
(declare-const ObsNot_voyantRouge_0 Bool)
(assert (=> ObsNot_voyantRouge_0 (and (not voyantRouge_0) known_voyantRouge_0) ))
(declare-const voyantRouge_1 Bool)
(declare-const known_voyantRouge_1 Bool)
(declare-const Obs_voyantRouge_1 Bool)
(assert (=> Obs_voyantRouge_1 (and voyantRouge_1 known_voyantRouge_1) ))
(declare-const ObsNot_voyantRouge_1 Bool)
(assert (=> ObsNot_voyantRouge_1 (and (not voyantRouge_1) known_voyantRouge_1) ))
(declare-const keep_voyantRouge_1 Bool)
(assert (= keep_voyantRouge_1 (= voyantRouge_0 voyantRouge_1)))
(declare-const keepKnown_voyantRouge_1 Bool)
(assert (= keepKnown_voyantRouge_1 (= known_voyantRouge_0 known_voyantRouge_1)))
(declare-const voyantRouge_2 Bool)
(declare-const known_voyantRouge_2 Bool)
(declare-const Obs_voyantRouge_2 Bool)
(assert (=> Obs_voyantRouge_2 (and voyantRouge_2 known_voyantRouge_2) ))
(declare-const ObsNot_voyantRouge_2 Bool)
(assert (=> ObsNot_voyantRouge_2 (and (not voyantRouge_2) known_voyantRouge_2) ))
(declare-const keep_voyantRouge_2 Bool)
(assert (= keep_voyantRouge_2 (= voyantRouge_1 voyantRouge_2)))
(declare-const keepKnown_voyantRouge_2 Bool)
(assert (= keepKnown_voyantRouge_2 (= known_voyantRouge_1 known_voyantRouge_2)))
(declare-const panne_0 Bool)
(declare-const known_panne_0 Bool)
(declare-const Obs_panne_0 Bool)
(assert (=> Obs_panne_0 (and panne_0 known_panne_0) ))
(declare-const ObsNot_panne_0 Bool)
(assert (=> ObsNot_panne_0 (and (not panne_0) known_panne_0) ))
(declare-const panne_1 Bool)
(declare-const known_panne_1 Bool)
(declare-const Obs_panne_1 Bool)
(assert (=> Obs_panne_1 (and panne_1 known_panne_1) ))
(declare-const ObsNot_panne_1 Bool)
(assert (=> ObsNot_panne_1 (and (not panne_1) known_panne_1) ))
(declare-const keep_panne_1 Bool)
(assert (= keep_panne_1 (= panne_0 panne_1)))
(declare-const keepKnown_panne_1 Bool)
(assert (= keepKnown_panne_1 (= known_panne_0 known_panne_1)))
(declare-const panne_2 Bool)
(declare-const known_panne_2 Bool)
(declare-const Obs_panne_2 Bool)
(assert (=> Obs_panne_2 (and panne_2 known_panne_2) ))
(declare-const ObsNot_panne_2 Bool)
(assert (=> ObsNot_panne_2 (and (not panne_2) known_panne_2) ))
(declare-const keep_panne_2 Bool)
(assert (= keep_panne_2 (= panne_1 panne_2)))
(declare-const keepKnown_panne_2 Bool)
(assert (= keepKnown_panne_2 (= known_panne_1 known_panne_2)))
(declare-const R2_0 Bool)
(assert (= R2_0 (=> (and (not voyantRouge_0) known_voyantRouge_0)(and (not panne_0) known_panne_0)) ))
(declare-const R2_1 Bool)
(assert (= R2_1 (=> (and (not voyantRouge_1) known_voyantRouge_1)(and (not panne_1) known_panne_1)) ))
(declare-const R2_2 Bool)
(assert (= R2_2 (=> (and (not voyantRouge_2) known_voyantRouge_2)(and (not panne_2) known_panne_2)) ))
(declare-const R3_0 Bool)
(assert (= R3_0 (=>  (and alarme_0 known_alarme_0)  (and panne_0 known_panne_0) ) ))
(declare-const R3_1 Bool)
(assert (= R3_1 (=>  (and alarme_1 known_alarme_1)  (and panne_1 known_panne_1) ) ))
(declare-const R3_2 Bool)
(assert (= R3_2 (=>  (and alarme_2 known_alarme_2)  (and panne_2 known_panne_2) ) ))
(declare-const R1_0 Bool)
(assert (= R1_0 (=>  (and voyantVert_0 known_voyantVert_0) (and (not panne_0) known_panne_0)) ))
(declare-const R1_1 Bool)
(assert (= R1_1 (=>  (and voyantVert_1 known_voyantVert_1) (and (not panne_1) known_panne_1)) ))
(declare-const R1_2 Bool)
(assert (= R1_2 (=>  (and voyantVert_2 known_voyantVert_2) (and (not panne_2) known_panne_2)) ))
(assert known_panne_0)
(assert known_panne_1)
(assert known_panne_2)
(assert keepKnown_voyantVert_1 )
(assert R1_0 )
(assert R1_1 )
(assert R1_2 )
(assert R2_0 )
(assert R2_1 )
(assert R2_2 )
(assert R3_0 )
(assert R3_1 )
(assert R3_2 )
(assert Obs_voyantVert_0 )
(assert Obs_alarme_1 )
(declare-const y12 Bool )
(assert (=>  y12  ObsNot_voyantRouge_1 ))
(declare-const y13 Bool )
(assert (=> y13 (not panne_1 ) ))
(declare-const y14 Bool )
(assert (=>  y14  keep_voyantVert_1 ))
(assert (or y12 y14 y13 ))
(check-sat)
(get-model)
